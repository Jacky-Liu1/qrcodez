{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isScanning","setIsScanning","result","setResult","qrGenInput","setqrGenInput","toggleButton","className","onClick","delay","onError","err","console","error","onScan","data","style","width","height","type","value","onChange","e","target","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAyEeA,MAnEf,WAGE,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAS,aAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAaIC,EAAe,WACjBL,GAAeD,IAIjB,OACE,sBAAKO,UAAU,MAAf,UACE,4CAGEP,EACE,wBAAQQ,QAASF,EAAjB,+BAEA,wBAAQE,QAASF,EAAjB,8BAKFN,EACE,iCACE,cAAC,IAAD,CACES,MAAO,IACPC,QA1BM,SAAAC,GAChBC,QAAQC,MAAMF,IA0BJG,OAjCK,SAAAC,GACXA,GACFZ,EAAUY,IAgCFC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,WAGjC,2EAGN,0DAA6BhB,KAE7B,uBACA,uBACA,uBACA,uBACA,uBACA,uBAEA,8CACA,uBAAOc,MAAO,CAAEC,MAAO,SAAWE,KAAK,OAAOC,MAAOhB,EAAYiB,SAAU,SAACC,GAAD,OAAOjB,EAAciB,EAAEC,OAAOH,QAAQI,YAAY,qCAC7H,uBACA,uBACA,cAAC,IAAD,CAAQJ,MAAOhB,QCvDNqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5b4bbf7d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport QrReader from 'react-qr-reader';\nimport QRCode from 'qrcode.react';\n\n\nfunction App() {\n\n\n  const [isScanning, setIsScanning] = useState(false);\n  const [result, setResult] = useState(\"No result\");\n  const [qrGenInput, setqrGenInput] = useState(\"\");\n\n\n  let handleScan = data => {\n    if (data) {\n      setResult(data)\n    }\n  }\n\n  let handleError = err => {\n    console.error(err)\n  }\n\n  let toggleButton = () => {\n    setIsScanning(!isScanning);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>QR Scanner</h1>\n\n      {\n        isScanning ?\n          <button onClick={toggleButton}>Turn off scanning</button>\n          :\n          <button onClick={toggleButton}>Turn on scanning</button>\n\n      }\n\n      {\n        isScanning ?\n          <center>\n            <QrReader\n              delay={300}\n              onError={handleError}\n              onScan={handleScan}\n              style={{ width: '20%', height: '20%' }}\n            />\n          </center>\n          : <h3>Scanner will be here after you turn it on</h3>\n      }\n\n      <p>This is what was scanned {result}</p>\n\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n\n      <h1>QR generator</h1>\n      <input style={{ width: '300px' }} type=\"text\" value={qrGenInput} onChange={(e) => setqrGenInput(e.target.value)} placeholder=\"Enter text to generate custom QR\"></input>\n      <br />\n      <br />\n      <QRCode value={qrGenInput} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}